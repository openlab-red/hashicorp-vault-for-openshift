{{- if .Values.vault.auth -}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "vault-bootstrap.fullname" . }}-auth
  labels:
    {{- include "vault-bootstrap.labels" . | nindent 4 }}
  annotations:
    {{- toYaml .Values.auth.annotations | nindent 4 }}
spec:
  backoffLimit: 5
  #ttlSecondsAfterFinished: 120
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        {{- include "vault-bootstrap.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: vault
      serviceAccount: vault
      restartPolicy: Never
      containers:
      - name: auth
        image: {{ .Values.vault.image.repository }}:{{ .Values.vault.image.tag }}
        env:
        - name: VAULT_ADDR
          value: {{ .Values.vault.schema }}://{{ .Release.Name }}.{{ .Release.Namespace }}.svc:{{ .Values.vault.port }}
        envFrom:
        - secretRef:
            name: {{ include "vault-bootstrap.fullname" . }}
        command:
        - /bin/sh
        - '-c'
        - |
            AUTH=$(vault auth list -tls-skip-verify |grep kubernetes|wc -l|tr -d ' ')

            if [[ "$AUTH" == "0" ]]; then
              JWT=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              KUBERNETES_HOST=https://${KUBERNETES_PORT_443_TCP_ADDR}:443

              vault auth enable --tls-skip-verify kubernetes
              vault write --tls-skip-verify auth/kubernetes/config issuer=https://kubernetes.default.svc token_reviewer_jwt=$JWT kubernetes_host=$KUBERNETES_HOST kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            fi
{{- end -}}
