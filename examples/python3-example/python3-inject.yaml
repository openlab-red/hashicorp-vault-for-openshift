---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: python3-example
    app.kubernetes.io/name: python3-example
  name: python3-example
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/instance: python3-example
    app.kubernetes.io/name: python3-example

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app.kubernetes.io/instance: python3-example
    app.kubernetes.io/name: python3-example
  name: python3-example
spec:
  to:
    kind: Service
    name: python3-example

---
apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    app.kubernetes.io/instance: python3-example
    app.kubernetes.io/name: python3-example
  name: python3-example
spec:
  triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - python3-example
        from:
          kind: ImageStreamTag
          name: 'python3-example:latest'
  replicas: 1
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/ca-key: '/var/run/secrets/kubernetes.io/serviceaccount/ca-bundle/service-ca.crt'
        vault.hashicorp.com/role: example
        vault.hashicorp.com/agent-configmap: "example"
      labels:
        app.kubernetes.io/instance: python3-example
        app.kubernetes.io/name: python3-example
    spec:
      containers:
      - name: python3-example
        image: python3-example:latest
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        env:
        - name: PYTHON3_CONFIG_LOCATION
          value: /vault/secrets/application.yaml
        volumeMounts:
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount/ca-bundle
          name: vault-cabundle
      volumes:
      - configMap:
          name: vault-cabundle
        name: vault-cabundle
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: vault-cabundle
  labels:
    app.kubernetes.io/instance: vault-agent
    app.kubernetes.io/name: vault-agent
  annotations:
    service.beta.openshift.io/inject-cabundle: "true"
data: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: example
data:
  template.ctmpl: |
    {{ with secret "secret/example" }}
      this is the password: {{ .Data.password }}
    {{ end }}
  config.hcl: |
    "vault" = {
        "ca_path" = "/var/run/secrets/kubernetes.io/serviceaccount/ca-bundle/service-ca.crt"
        "address" = "https://poc-vault.hashicorp.svc.cluster.local:8200"
    }
    "pid_file" = "/home/vault/.pid"
    "auto_auth" = {
            method "kubernetes"  {
                    "type" = "kubernetes"
                    "mount_path" = "auth/kubernetes"
                    "config" = {
                            "role" = "example"
                            "jwt" = "@/var/run/secrets/kubernetes.io/serviceaccount/token"
                    }
            }
            "sink" = {
                    "type" = "file"
                    "config" = {
                            "path" = "/home/vault/.token"
                    }
            }
    }
    "template" {
        "source"      = "/vault/config/template.ctmpl"
        "destination" = "application.yaml"
    }
    "exit_after_auth" = false
  config-init.hcl: | 
    "vault" = {
        "ca_path" = "/var/run/secrets/kubernetes.io/serviceaccount/ca-bundle/service-ca.crt"
        "address" = "https://poc-vault.hashicorp.svc.cluster.local:8200"
    }
    "pid_file" = "/home/vault/.pid"
    "auto_auth" = {
            method "kubernetes"  {
                    "type" = "kubernetes"
                    "mount_path" = "auth/kubernetes"
                    "config" = {
                            "role" = "example"
                            "jwt" = "@/var/run/secrets/kubernetes.io/serviceaccount/token"
                    }
            }
            "sink" = {
                    "type" = "file"
                    "config" = {
                            "path" = "/home/vault/.token"
                    }
            }
    }
    "template" {
        "source"      = "/vault/config/template.ctmpl"
        "destination" = "application.yaml"
    }
    "exit_after_auth" = true