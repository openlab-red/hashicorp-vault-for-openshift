---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: python3-example
    app.kubernetes.io/name: python3-example
  name: python3-example
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/instance: python3-example
    app.kubernetes.io/name: python3-example

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app.kubernetes.io/instance: python3-example
    app.kubernetes.io/name: python3-example
  name: python3-example
spec:
  to:
    kind: Service
    name: python3-example

---
apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    app.kubernetes.io/instance: python3-example
    app.kubernetes.io/name: python3-example
  name: python3-example
spec:
  triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - python3-example
        from:
          kind: ImageStreamTag
          name: 'python3-example:latest'
  replicas: 1
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/ca-key: '/var/run/secrets/kubernetes.io/serviceaccount/ca-bundle/service-ca.crt'
        vault.hashicorp.com/agent-inject-secret-application.yaml: secret/example
        vault.hashicorp.com/agent-inject-template-application.yaml: |
          {{- with secret "secret/example" -}}
          secret:
            example:
              password: {{ .Data.password }}
          {{- end }}
        vault.hashicorp.com/role: example
        vault.hashicorp.com/agent-configmap: "example"
      labels:
        app.kubernetes.io/instance: python3-example
        app.kubernetes.io/name: python3-example
    spec:
      containers:
      - name: python3-example
        image: python3:latest
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        env:
        - name: PYTHON3_CONFIG_LOCATION
          value: /vault/secrets/application.yaml
        volumeMounts:
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount/ca-bundle
          name: vault-cabundle
      volumes:
      - configMap:
          name: vault-agent-cabundle
        name: vault-cabundle
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: vault-agent-cabundle
  labels:
    app.kubernetes.io/instance: vault-agent
    app.kubernetes.io/name: vault-agent
  annotations:
    service.beta.openshift.io/inject-cabundle: "true"
data: {}

---
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: example
data:
  config.hcl: |
    "auto_auth" = {
      "method" = {
        "config" = {
          "role" = "example"
        }
        "type" = "kubernetes"
      }

      "sink" = {
        "config" = {
          "path" = "/home/vault/.token"
        }

        "type" = "file"
      }
    }

    "exit_after_auth" = false
    "pid_file" = "/home/vault/.pid"

    "template" = {
      "contents" = "{{- with secret \"secret/example" -}}The secret is - {{ .Data.password }}{{- end }}"
      "destination" = "application.yaml"
    }

    "vault" = {
      "address" = "https://vault.demo.svc.cluster.local:8200"
      "ca_cert" = "/vault/tls/ca.crt"
      "client_cert" = "/vault/tls/client.crt"
      "client_key" = "/vault/tls/client.key"
    }
  config-init.hcl: |
    "auto_auth" = {
      "method" = {
        "config" = {
          "role" = "db-app"
        }
        "type" = "kubernetes"
      }

      "sink" = {
        "config" = {
          "path" = "/home/vault/.token"
        }

        "type" = "file"
      }
    }

    "exit_after_auth" = true
    "pid_file" = "/home/vault/.pid"

    "template" = {
      "contents" = "{{- with secret \"secret/example" -}}The secret is - {{ .Data.password }}{{- end }}"
      "destination" = "application.yaml"
    }

    "vault" = {
      "address" = "https://vault.demo.svc.cluster.local:8200"
      "ca_cert" = "/vault/tls/ca.crt"
      "client_cert" = "/vault/tls/client.crt"
      "client_key" = "/vault/tls/client.key"
    }